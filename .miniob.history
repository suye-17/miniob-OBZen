### 2025-09-10 13:45:40.878
show tables
### 2025-09-10 13:46:06.884
use Tables_in_SYS
### 2025-09-10 13:48:41.169
CREATE TABLE table_1;
### 2025-09-10 13:49:56.743
find /home/simpur/OceanBase_MiniOB_2025/miniob-OBZen/src -name "*.h" -o -name "*.cpp" | grep -E "(executor|stmt)" | head -20
### 2025-09-10 13:50:06.181
ls -la /home/simpur/OceanBase_MiniOB_2025/miniob-OBZen/src/observer/sql/stmt/
### 2025-09-10 13:50:12.684
ls -la /home/simpur/OceanBase_MiniOB_2025/miniob-OBZen/src/observer/sql/executor/
### 2025-09-10 13:50:20.710
exit
### 2025-09-10 14:29:57.527
create table table_1;
### 2025-09-10 14:30:34.382
show talbes;
### 2025-09-10 14:30:43.297
show table;
### 2025-09-10 14:31:06.684
drop table Tables_in_SYS;
### 2025-09-10 14:38:41.796
CREATE TABLE users (    id INT PRIMARY KEY AUTO_INCREMENT,  -- 主键，自动增长    username VARCHAR(50) NOT NULL UNIQUE,  -- 用户名，非空且唯一    age INT,  -- 年龄，可空    email VARCHAR(100) UNIQUE,  -- 邮箱，唯一    created_at DATE  -- 创建日期);
### 2025-09-10 14:39:13.856
CREATE TABLE users (    id INT PRIMARY KEY,    username VARCHAR(50) NOT NULL,    age INT,    email VARCHAR(100));
### 2025-09-10 14:42:01.625
CREATE TABLE users (    id INT,    username CHAR(50),    age INT,    email CHAR(100),    PRIMARY KEY (id));
### 2025-09-10 14:42:18.786
drop table users;
### 2025-09-15 09:25:42.064
cd /home/simpur/OceanBase_MiniOB_2025/miniob-OBZen && ./build/bin/observer -f etc/observer.ini -P cli
### 2025-09-15 09:28:26.282
drop table if exists test_table;
### 2025-09-15 09:29:12.598
drop table test_table;
### 2025-09-15 09:31:34.044
CREATE TABLE IF NOT EXISTS test_like (    id INT PRIMARY KEY AUTO_INCREMENT PRIMARY KEY,    username VARCHAR(50) NOT NULL,    email VARCHAR(100) NOT NULL,    address VARCHAR(200),    phone VARCHAR(20),    password VARCHAR(50));
### 2025-09-15 09:31:41.987
CREATE TABLE IF NOT EXISTS test_like (
### 2025-09-15 09:31:41.992
    id INT PRIMARY KEY AUTO_INCREMENT PRIMARY KEY,
### 2025-09-15 09:31:41.997
    username VARCHAR(50) NOT NULL,
### 2025-09-15 09:31:42.002
    email VARCHAR(100) NOT NULL,
### 2025-09-15 09:31:42.003
    address VARCHAR(200),
### 2025-09-15 09:31:42.007
    phone VARCHAR(20),
### 2025-09-15 09:31:42.007
    password VARCHAR(50)
### 2025-09-15 09:32:19.068
CREATE TABLE IF NOT EXISTS test_like(
### 2025-09-15 09:33:55.590
CREATE TABLE IF NOT EXISTS test_like (id INT PRIMARY KEY AUTO_INCREMENT PRIMARY KEY,username VARCHAR(50) NOT NULL,email VARCHAR(100) NOT NULL,address VARCHAR(200),phone VARCHAR(20),password VARCHAR(50));
### 2025-09-15 09:36:23.600
CREATE TABLE test_like(  id int,  username char(50),  email char(100),  address char(200),  phone char(20),  password char(50));
### 2025-09-15 09:36:42.446
INSERT INTO test_like (username, email, address, phone, password) VALUES('张三', 'zhang3@example.com', '北京市朝阳区', '13812345678', 'pass123'),('张三丰', 'zhang3feng@test.com', '上海市浦东新区', '13987654321', 'pass%456'),('李四', 'lisi@example.com', '广州市天河区', '13887654321', 'pass_789'),('李四五', 'li45@test.cn', '北京市海淀区', '13712345678', '567pass'),('王五', 'wang5@example.com', '深圳市南山区', '13687654321', '890pass'),('王小五', 'wang55@test.com', '杭州市西湖区', '13898765432', 'pass%000'),('赵六', 'zhao6@example.org', '南京市玄武区', '13512345678', 'pass_111'),('赵六六', 'zhao66@test.net', '武汉市洪山区', '13856789012', '222pass');
### 2025-09-15 09:38:08.638
drop table test_like;
### 2025-09-15 09:38:15.413
CREATE TABLE test_like(id int, name char(20), description char(50));
### 2025-09-15 09:38:22.764
INSERT INTO test_like VALUES (1, 'Alice', 'A student from Beijing');
### 2025-09-15 09:38:30.328
SELECT * FROM test_like;
### 2025-09-15 09:38:39.079
SELECT * FROM test_like WHERE name LIKE 'A%';
### 2025-09-15 09:38:51.407
INSERT INTO test_like VALUES (2, 'Bob', 'A teacher from Shanghai');INSERT INTO test_like VALUES (3, 'Charlie', 'A worker from Guangzhou');
### 2025-09-15 09:39:10.111
SELECT * FROM test_like WHERE description LIKE '%teacher%';SELECT * FROM test_like WHERE name LIKE '_ob';SELECT * FROM test_like WHERE description LIKE '%from%';
### 2025-10-13 17:36:06.119
DROP TABLE IF EXISTS exp_table;
### 2025-10-13 17:37:26.049
CREATE TABLE exp_table (    id   INT,    col1 INT,    col2 INT,    col3 FLOAT,    col4 FLOAT);
### 2025-10-13 17:37:36.889
CREATE TABLE exp_table2 (    id   INT,    col1 INT);
### 2025-10-13 17:37:51.446
INSERT INTO exp_table VALUES    (1,  9,  8,  3.22,  1.91), -- col1-col2=1 (positive), col3-col4=1.31 (positive)    (2,  7,  4,  3.24,  4.97), -- col1-col2=3 (positive), col3-col4=-1.73 (negative)    (3,  5,  8,  1.36,  3.35), -- col1-col2=-3 (negative), col3-col4=-1.99 (negative)    (4,  10, 10, 5.50,  5.50), -- col1-col2=0, col3-col4=0    (5,  -2, -5, -1.00, -2.50),-- col1-col2=3 (positive), col3-col4=1.50 (positive)    (6,  -5, -2, -2.50, -1.00),-- col1-col2=-3 (negative), col3-col4=-1.50 (negative)    (7,  0,   0,  0.00,  0.00), -- 结果都为0    (8,  0,   5,  0.00,  1.00), -- 结果都为负    (9,  5,   0,  1.00,  0.00), -- 结果都为正    (10, NULL, 5, NULL,  1.00), -- col1为NULL    (11, 5,  NULL, 1.00,  NULL), -- col2为NULL    (12, NULL, NULL, NULL, NULL);
### 2025-10-13 17:38:27.466
SELECT 'A. Original Query (col1 - col2 > -0)' AS test_name, *
### 2025-10-13 17:38:27.479
FROM exp_table
### 2025-10-13 17:38:37.151
WHERE -0 < col1 - col2;
### 2025-10-13 17:38:40.641
SELECT 'A. Original Query (col1 - col2 > -0)' AS test_name, *FROM exp_tableWHERE -0 < col1 - col2;
### 2025-10-13 17:42:16.457
SELECT id FROM exp_table WHERE -0 < col1 - col2 ORDER BY id;
### 2025-10-13 17:46:25.401
CREATE TABLE exp_table (id INT, col1 INT, col2 INT, col3 FLOAT, col4 FLOAT);
### 2025-10-13 17:48:56.711
SELECT * FROM exp_table;
### 2025-10-13 17:52:56.804
-- 创建测试表
### 2025-10-13 17:52:56.819
-- 测试基本SELECT语句
### 2025-10-13 17:52:56.819
-- 测试简单SELECT
### 2025-10-13 17:52:56.837
-- 测试带WHERE条件的SELECT
### 2025-10-13 17:52:56.838
-- 退出
### 2025-10-13 17:53:32.019
-- 测试基本功能
### 2025-10-13 17:53:32.057
create table test(id int, name char(10));
### 2025-10-13 17:53:32.076
-- 测试简单查询
### 2025-10-13 17:54:20.643
select * from test;
### 2025-10-13 18:07:58.046
select 1;
### 2025-10-13 19:32:09.260
-- 测试修复后的SELECT语句
### 2025-10-13 19:32:09.266
-- 插入测试数据
### 2025-10-13 19:32:09.268
-- 测试您的SELECT语句
### 2025-10-13 19:32:09.268
-- 测试其他SELECT变体
### 2025-10-13 19:32:09.269
select id from t_basic;
### 2025-10-13 19:32:09.270
select id, name from t_basic where age > 20;
### 2025-10-13 19:34:53.693
-- 逐步测试
### 2025-10-13 19:34:53.701
-- 第1步：测试表是否存在
### 2025-10-13 19:34:53.701
desc t_basic;
### 2025-10-13 19:34:53.702
-- 第2步：测试最简单的SELECT
### 2025-10-13 19:35:16.109
-- 创建全新的表进行测试
### 2025-10-13 19:35:16.146
create table test_select(id int, name char(10));
### 2025-10-13 19:35:16.203
insert into test_select values(1, 'hello');
### 2025-10-13 19:35:16.203
select * from test_select;
### 2025-10-13 19:35:40.350
-- 测试您原来的查询
### 2025-10-13 19:48:30.378
create table t_basic(id int, age int, name char(4), score float);
### 2025-10-13 20:02:55.182
select id, age, name, score from t_basic;
### 2025-10-13 20:03:08.289
select * from t_table;
### 2025-10-13 20:13:19.009
delete from t_basic where id=1;
### 2025-10-14 08:08:29.331
-- 测试数据库功能
### 2025-10-14 08:08:29.333
create table test_new(id int, name char(10));
### 2025-10-14 08:08:29.339
insert into test_new values(1, 'hello');
### 2025-10-14 08:08:29.340
insert into test_new values(2, 'world');
### 2025-10-14 08:08:29.340
select * from test_new;
### 2025-10-14 08:08:29.341
select test_new.id, test_new.name from test_new;
### 2025-10-14 08:09:05.790
show tables;
### 2025-10-14 08:11:40.610
-- 测试DELETE语句
### 2025-10-14 08:11:40.612
create table test_delete(id int, name char(10));
### 2025-10-14 08:11:40.620
insert into test_delete values(1, 'test1');
### 2025-10-14 08:11:40.621
insert into test_delete values(2, 'test2');
### 2025-10-14 08:11:40.621
delete from test_delete where id=2;
### 2025-10-14 08:11:40.621
select * from test_delete;
### 2025-10-14 08:12:32.589
delete from test_new where test_new.id=1;
### 2025-10-14 08:12:58.030
delete from test_new;
### 2025-10-14 08:13:21.747
-- 解决DELETE和数据重复问题的完整方案
### 2025-10-14 08:13:21.750
-- 1. 查看当前数据状态
### 2025-10-14 08:13:21.751
-- 2. 清理所有数据（如果需要）
### 2025-10-14 08:13:21.752
-- 3. 重新插入干净的数据
### 2025-10-14 08:13:21.753
-- 4. 验证数据
### 2025-10-14 08:13:21.753
-- 5. 测试带WHERE的DELETE（使用表前缀）
### 2025-10-14 08:13:21.753
delete from t_basic where t_basic.id=2;
### 2025-10-14 08:13:21.753
-- 6. 验证删除结果
### 2025-10-14 08:16:34.817
-- 测试修复后的DELETE语句
### 2025-10-14 08:16:34.820
-- 首先清理并重新插入数据
### 2025-10-14 08:16:34.820
delete from t_basic;
### 2025-10-14 08:16:34.820
insert into t_basic values(1, 20, 'Tom', 85.5);
### 2025-10-14 08:16:34.821
insert into t_basic values(2, 22, 'Jack', 92.0);
### 2025-10-14 08:16:34.821
insert into t_basic values(3, 21, 'Mary', 78.5);
### 2025-10-14 08:16:34.822
-- 查看初始数据
### 2025-10-14 08:16:34.822
-- 测试您要求的DELETE语句
### 2025-10-14 08:16:34.823
-- 验证删除结果
### 2025-10-14 08:17:37.894
-- 测试您要求的确切DELETE语句
### 2025-10-14 08:17:37.896
delete from t_basic where id=2;
### 2025-10-14 08:17:55.444
-- 验证DELETE是否真的工作了
### 2025-10-14 08:17:55.447
select * from t_basic;
### 2025-10-14 08:18:09.357
exit;
