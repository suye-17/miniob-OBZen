### 2025-10-10 19:39:48.538
CREATE TABLE ssq_1(id int, col1 int, feat1 float);
### 2025-10-10 19:39:48.676
CREATE TABLE ssq_2(id int, col2 int, feat2 float);
### 2025-10-10 19:39:48.735
INSERT INTO ssq_1 VALUES (95, 37, 52.87);
### 2025-10-10 19:39:48.804
INSERT INTO ssq_1 VALUES (17, 7, 52.38);
### 2025-10-10 19:39:48.835
INSERT INTO ssq_1 VALUES (23, 15, 61.25);
### 2025-10-10 19:39:48.865
INSERT INTO ssq_1 VALUES (44, 22, 38.42);
### 2025-10-10 19:39:48.893
INSERT INTO ssq_2 VALUES (1, 7, 10.0);
### 2025-10-10 19:39:48.929
INSERT INTO ssq_2 VALUES (2, 15, 20.0);
### 2025-10-10 19:39:48.948
INSERT INTO ssq_2 VALUES (3, 37, 30.0);
### 2025-10-10 19:39:48.967
SELECT * FROM ssq_1;
### 2025-10-10 19:39:49.018
SELECT * FROM ssq_2;
### 2025-10-10 19:39:49.045
SELECT col2 FROM ssq_2;
### 2025-10-10 19:39:49.146
DROP TABLE ssq_1;
### 2025-10-10 19:39:49.173
DROP TABLE ssq_2;
### 2025-10-11 10:12:58.956
show tables;
### 2025-10-11 10:19:37.989
CREATE TABLE ssq_1 (id int, col1 int, feat1 float);
### 2025-10-11 10:19:38.880
CREATE TABLE ssq_2 (id int, col2 int, feat2 float);
### 2025-10-11 10:19:51.748
INSERT INTO ssq_1 VALUES (28, 45, 71.96); -- 这行会被查询出来
### 2025-10-11 10:19:51.753
INSERT INTO ssq_1 VALUES (97, 45, 71.6);  -- 这行会被查询出来
### 2025-10-11 10:19:52.650
INSERT INTO ssq_1 VALUES (7, 94, 47.94);
### 2025-10-11 10:19:59.722
INSERT INTO ssq_2 VALUES (101, 45, 80.0);
### 2025-10-11 10:22:18.403
select * from ssq_1;
### 2025-10-11 10:22:23.749
select * from ssq_2;
### 2025-10-11 10:32:31.286
-- 子查询功能需求验证测试套件
### 2025-10-11 10:32:31.290
-- ===== 测试1: IN 语句 =====
### 2025-10-11 10:32:31.290
-- 1.1 基本 IN 语句（值列表）
### 2025-10-11 10:32:31.290
SELECT * FROM ssq_1 WHERE col1 IN (10, 20, 30);
### 2025-10-11 10:32:31.294
-- 1.2 IN 子查询
### 2025-10-11 10:32:31.294
SELECT * FROM ssq_1 WHERE col1 IN (SELECT ssq_2.col2 FROM ssq_2);
### 2025-10-11 10:32:31.298
-- 1.3 NOT IN 语句（值列表）
### 2025-10-11 10:32:31.298
SELECT * FROM ssq_1 WHERE col1 NOT IN (10, 20);
### 2025-10-11 10:32:31.300
-- 1.4 NOT IN 子查询
### 2025-10-11 10:32:31.300
SELECT * FROM ssq_1 WHERE col1 NOT IN (SELECT ssq_2.col2 FROM ssq_2);
### 2025-10-11 10:32:31.302
-- ===== 测试2: EXISTS 语句（如果已实现）=====
### 2025-10-11 10:32:31.302
-- 注意：这个可能尚未实现
### 2025-10-11 10:32:31.302
-- SELECT * FROM ssq_1 WHERE EXISTS (SELECT 1 FROM ssq_2 WHERE ssq_2.id = 101);
### 2025-10-11 10:32:31.302
-- ===== 测试3: 与子查询结果做比较运算 =====
### 2025-10-11 10:32:31.302
-- 3.1 等于比较
### 2025-10-11 10:32:31.307
-- 3.2 大于比较
### 2025-10-11 10:32:31.308
SELECT * FROM ssq_1 WHERE feat1 > (SELECT MIN(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.313
-- 3.3 小于比较
### 2025-10-11 10:32:31.313
SELECT * FROM ssq_1 WHERE feat1 < (SELECT AVG(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.316
-- 3.4 大于等于比较
### 2025-10-11 10:32:31.316
SELECT * FROM ssq_1 WHERE feat1 >= (SELECT AVG(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.320
-- 3.5 小于等于比较
### 2025-10-11 10:32:31.321
SELECT * FROM ssq_1 WHERE feat1 <= (SELECT MAX(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.324
-- 3.6 不等于比较
### 2025-10-11 10:32:31.324
SELECT * FROM ssq_1 WHERE feat1 != (SELECT MIN(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.327
-- ===== 测试4: 子查询中带聚合函数 =====
### 2025-10-11 10:32:31.327
-- 4.1 MIN 聚合函数
### 2025-10-11 10:32:31.327
SELECT * FROM ssq_1 WHERE feat1 = (SELECT MIN(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.330
-- 4.2 MAX 聚合函数
### 2025-10-11 10:32:31.330
SELECT * FROM ssq_1 WHERE feat1 = (SELECT MAX(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.334
-- 4.3 SUM 聚合函数
### 2025-10-11 10:32:31.334
SELECT * FROM ssq_1 WHERE feat1 = (SELECT SUM(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.337
-- 4.4 AVG 聚合函数
### 2025-10-11 10:32:31.337
SELECT * FROM ssq_1 WHERE col1 = (SELECT AVG(ssq_2.col2) FROM ssq_2);
### 2025-10-11 10:32:31.340
-- 4.5 COUNT 聚合函数
### 2025-10-11 10:32:31.340
SELECT * FROM ssq_1 WHERE col1 = (SELECT COUNT(*) FROM ssq_2);
### 2025-10-11 10:32:31.343
-- ===== 测试5: 非关联子查询（子查询独立执行）=====
### 2025-10-11 10:32:31.343
-- 5.1 子查询不引用外表字段
### 2025-10-11 10:32:31.343
SELECT * FROM ssq_1 WHERE feat1 > (SELECT MIN(feat2) FROM ssq_2);
### 2025-10-11 10:32:31.346
-- ===== 测试6: 不同类型值比较（如果支持类型转换）=====
### 2025-10-11 10:32:31.346
-- 6.1 整数与浮点数比较
### 2025-10-11 10:32:31.346
SELECT * FROM ssq_1 WHERE col1 = (SELECT MAX(ssq_2.feat2) FROM ssq_2);
### 2025-10-11 10:32:31.349
EXIT;
### 2025-10-11 10:54:02.385
-- 简单子查询功能全面测试脚本
### 2025-10-11 10:54:02.386
-- 准备测试数据
### 2025-10-11 10:54:02.386
CREATE TABLE t1(id int, val int, score float);
### 2025-10-11 10:54:02.395
CREATE TABLE t2(id int, val int, score float);
### 2025-10-11 10:54:02.401
CREATE TABLE t3(id int, name char(10));
### 2025-10-11 10:54:02.406
INSERT INTO t1 VALUES (1, 10, 90.5);
### 2025-10-11 10:54:02.408
INSERT INTO t1 VALUES (2, 20, 80.0);
### 2025-10-11 10:54:02.408
INSERT INTO t1 VALUES (3, 30, 70.5);
### 2025-10-11 10:54:02.409
INSERT INTO t1 VALUES (4, 40, 60.0);
### 2025-10-11 10:54:02.410
INSERT INTO t2 VALUES (101, 10, 95.0);
### 2025-10-11 10:54:02.411
INSERT INTO t2 VALUES (102, 20, 85.0);
### 2025-10-11 10:54:02.411
INSERT INTO t2 VALUES (103, 50, 75.0);
### 2025-10-11 10:54:02.412
INSERT INTO t3 VALUES (1, 'Alice');
### 2025-10-11 10:54:02.413
INSERT INTO t3 VALUES (2, 'Bob');
### 2025-10-11 10:54:02.413
-- 查看数据
### 2025-10-11 10:54:02.416
SELECT * FROM t3;
### 2025-10-11 10:54:02.418
SELECT * FROM t1 WHERE val IN (SELECT val FROM t2);
### 2025-10-11 10:54:02.420
SELECT * FROM t1 WHERE val NOT IN (SELECT val FROM t2);
### 2025-10-11 10:54:02.423
-- 测试3: 标量子查询 - 比较运算
### 2025-10-11 10:54:02.423
SELECT * FROM t1 WHERE score > (SELECT MIN(t2.score) FROM t2);
### 2025-10-11 10:54:02.426
SELECT * FROM t1 WHERE score < (SELECT MAX(t2.score) FROM t2);
### 2025-10-11 10:54:02.430
SELECT * FROM t1 WHERE score >= (SELECT AVG(t2.score) FROM t2);
### 2025-10-11 10:54:02.432
-- 测试4: 子查询中带聚合函数
### 2025-10-11 10:54:02.432
SELECT * FROM t1 WHERE val = (SELECT MAX(val) FROM t2);
### 2025-10-11 10:54:02.435
SELECT * FROM t1 WHERE id IN (SELECT COUNT(*) FROM t2);
### 2025-10-11 10:54:02.438
-- 测试5: 空结果集测试（不应崩溃）
### 2025-10-11 10:54:02.438
SELECT * FROM t1 WHERE score < (SELECT MAX(score) FROM t2 WHERE 1=0);
### 2025-10-11 10:54:02.439
-- 测试6: 子查询返回多个值用于IN
### 2025-10-11 10:54:02.440
SELECT * FROM t1 WHERE val IN (SELECT val FROM t2 WHERE score > 80.0);
### 2025-10-11 10:54:02.445
-- 清理测试数据
### 2025-10-11 10:54:02.458
DROP TABLE t3;
### 2025-10-11 11:12:54.578
-- 完整子查询功能测试（符合官方要求）
### 2025-10-11 11:12:54.578
-- ==========================================
### 2025-10-11 11:12:54.578
CREATE TABLE t1(id int, col1 int, feat1 float);
### 2025-10-11 11:12:54.586
CREATE TABLE t2(id int, col2 int, feat2 float);
### 2025-10-11 11:12:54.592
INSERT INTO t1 VALUES (1, 10, 10.0);
### 2025-10-11 11:12:54.594
INSERT INTO t1 VALUES (2, 20, 25.0);
### 2025-10-11 11:12:54.595
INSERT INTO t1 VALUES (3, 30, 50.0);
### 2025-10-11 11:12:54.595
INSERT INTO t1 VALUES (4, 40, 75.0);
### 2025-10-11 11:12:54.596
INSERT INTO t1 VALUES (5, 50, 100.0);
### 2025-10-11 11:12:54.596
INSERT INTO t2 VALUES (101, 10, 20.0);
### 2025-10-11 11:12:54.597
INSERT INTO t2 VALUES (102, 20, 30.0);
### 2025-10-11 11:12:54.598
INSERT INTO t2 VALUES (103, 30, 50.0);
### 2025-10-11 11:12:54.601
-- 测试1: IN 语句
### 2025-10-11 11:12:54.601
SELECT * FROM t1 WHERE col1 IN (SELECT col2 FROM t2);
### 2025-10-11 11:12:54.605
-- 测试2: NOT IN 语句
### 2025-10-11 11:12:54.605
SELECT * FROM t1 WHERE col1 NOT IN (SELECT col2 FROM t2);
### 2025-10-11 11:12:54.607
-- 测试3: 标量子查询比较
### 2025-10-11 11:12:54.607
SELECT * FROM t1 WHERE feat1 > (SELECT MIN(t2.feat2) FROM t2);
### 2025-10-11 11:12:54.610
SELECT * FROM t1 WHERE feat1 < (SELECT MAX(t2.feat2) FROM t2);
### 2025-10-11 11:12:54.613
-- 测试4: 子查询带聚合函数
### 2025-10-11 11:12:54.613
SELECT * FROM t1 WHERE col1 = (SELECT MAX(col2) FROM t2);
### 2025-10-11 11:12:54.616
SELECT * FROM t1 WHERE feat1 >= (SELECT AVG(feat2) FROM t2);
### 2025-10-11 11:12:54.619
-- 测试5: EXISTS 语句
### 2025-10-11 11:12:54.622
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE col2 > 100);
### 2025-10-11 11:12:54.625
-- 测试6: NOT EXISTS 语句
### 2025-10-11 11:13:29.168
SELECT col2 FROM t2;
### 2025-10-11 11:13:41.608
SELECT * FROM t1 WHERE EXISTS (SELECT val FROM t2);
### 2025-10-11 11:13:41.610
SELECT * FROM t1 WHERE NOT EXISTS (SELECT val FROM t2 WHERE 1=0);
### 2025-10-11 11:15:14.802
CREATE TABLE t1(id int, val int);
### 2025-10-11 11:15:14.812
CREATE TABLE t2(id int, val int);
### 2025-10-11 11:15:14.817
INSERT INTO t1 VALUES (1, 10);
### 2025-10-11 11:15:14.819
INSERT INTO t1 VALUES (2, 20);
### 2025-10-11 11:15:14.819
INSERT INTO t2 VALUES (101, 10);
### 2025-10-11 11:15:14.820
INSERT INTO t2 VALUES (102, 20);
### 2025-10-11 11:15:14.821
SELECT * FROM t1;
### 2025-10-11 11:15:14.823
SELECT * FROM t2;
### 2025-10-11 11:15:14.824
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2);
### 2025-10-11 11:15:14.827
SELECT * FROM t1 WHERE NOT EXISTS (SELECT * FROM t2);
### 2025-10-11 11:15:14.828
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE 1=0);
### 2025-10-11 11:15:14.831
SELECT * FROM t1 WHERE NOT EXISTS (SELECT * FROM t2 WHERE 1=0);
### 2025-10-11 11:15:14.833
DROP TABLE t1;
### 2025-10-11 11:15:14.837
DROP TABLE t2;
### 2025-10-11 11:15:14.840
exit;
