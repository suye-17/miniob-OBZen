=== 高级子查询功能测试 ===

=== 初始化测试数据 ===
CREATE TABLE STUDENTS(ID INT, NAME CHAR(20), AGE INT, CLASS_ID INT);
SUCCESS
CREATE TABLE CLASSES(ID INT, CLASS_NAME CHAR(20), TEACHER CHAR(20));
SUCCESS
CREATE TABLE SCORES(STUDENT_ID INT, SUBJECT CHAR(20), SCORE INT);
SUCCESS
CREATE TABLE EMPTY_TABLE(ID INT, VAL INT);
SUCCESS

INSERT INTO STUDENTS VALUES (1, 'ALICE', 20, 1);
SUCCESS
INSERT INTO STUDENTS VALUES (2, 'BOB', 22, 1);
SUCCESS
INSERT INTO STUDENTS VALUES (3, 'CHARLIE', 21, 2);
SUCCESS
INSERT INTO STUDENTS VALUES (4, 'DAVID', 23, 2);
SUCCESS
INSERT INTO STUDENTS VALUES (5, 'EVE', 20, 3);
SUCCESS

INSERT INTO CLASSES VALUES (1, 'MATH', 'PROF. SMITH');
SUCCESS
INSERT INTO CLASSES VALUES (2, 'PHYSICS', 'PROF. JONES');
SUCCESS
INSERT INTO CLASSES VALUES (3, 'CHEMISTRY', 'PROF. BROWN');
SUCCESS

INSERT INTO SCORES VALUES (1, 'MATH', 85);
SUCCESS
INSERT INTO SCORES VALUES (1, 'PHYSICS', 90);
SUCCESS
INSERT INTO SCORES VALUES (2, 'MATH', 78);
SUCCESS
INSERT INTO SCORES VALUES (2, 'PHYSICS', 88);
SUCCESS
INSERT INTO SCORES VALUES (3, 'MATH', 92);
SUCCESS
INSERT INTO SCORES VALUES (3, 'PHYSICS', 85);
SUCCESS
INSERT INTO SCORES VALUES (4, 'MATH', 70);
SUCCESS

=== 测试1: IN子查询 - 查找有成绩的学生 ===
SELECT * FROM STUDENTS WHERE ID IN (SELECT STUDENT_ID FROM SCORES);
1 | ALICE | 20 | 1
2 | BOB | 22 | 1
3 | CHARLIE | 21 | 2
4 | DAVID | 23 | 2
ID | NAME | AGE | CLASS_ID

=== 测试2: NOT IN子查询 - 查找没有成绩的学生 ===
SELECT * FROM STUDENTS WHERE ID NOT IN (SELECT STUDENT_ID FROM SCORES);
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试3: EXISTS - 查找有学生的班级 ===
SELECT * FROM CLASSES WHERE EXISTS (SELECT * FROM STUDENTS WHERE STUDENTS.CLASS_ID = CLASSES.ID);
1 | MATH | PROF. SMITH
2 | PHYSICS | PROF. JONES
3 | CHEMISTRY | PROF. BROWN
ID | CLASS_NAME | TEACHER

=== 测试4: NOT EXISTS - 查找没有学生的班级 ===
SELECT * FROM CLASSES WHERE NOT EXISTS (SELECT * FROM STUDENTS WHERE STUDENTS.CLASS_ID = CLASSES.ID);
ID | CLASS_NAME | TEACHER

=== 测试5: 标量子查询 - 查找年龄大于平均年龄的学生 ===
SELECT * FROM STUDENTS WHERE AGE > (SELECT AVG(AGE) FROM STUDENTS);
2 | BOB | 22 | 1
4 | DAVID | 23 | 2
ID | NAME | AGE | CLASS_ID

=== 测试6: 标量子查询 - 查找分数高于平均分的记录 ===
SELECT * FROM SCORES WHERE SCORE > (SELECT AVG(SCORE) FROM SCORES);
1 | MATH | 85
1 | PHYSICS | 90
2 | PHYSICS | 88
3 | MATH | 92
3 | PHYSICS | 85
STUDENT_ID | SUBJECT | SCORE

=== 测试7: IN + 聚合 - 查找数学成绩大于80的学生 ===
SELECT * FROM STUDENTS WHERE ID IN (SELECT STUDENT_ID FROM SCORES WHERE SUBJECT = 'MATH' AND SCORE > 80);
1 | ALICE | 20 | 1
3 | CHARLIE | 21 | 2
ID | NAME | AGE | CLASS_ID

=== 测试8: IN子查询 - 子查询返回空结果 ===
SELECT * FROM STUDENTS WHERE ID IN (SELECT ID FROM EMPTY_TABLE);
ID | NAME | AGE | CLASS_ID

=== 测试9: NOT IN子查询 - 子查询返回空结果 ===
SELECT * FROM STUDENTS WHERE ID NOT IN (SELECT ID FROM EMPTY_TABLE);
1 | ALICE | 20 | 1
2 | BOB | 22 | 1
3 | CHARLIE | 21 | 2
4 | DAVID | 23 | 2
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试10: 标量子查询 MAX - 查找最高分 ===
SELECT * FROM SCORES WHERE SCORE = (SELECT MAX(SCORE) FROM SCORES);
3 | MATH | 92
STUDENT_ID | SUBJECT | SCORE

=== 测试11: 标量子查询 MIN - 查找最低分 ===
SELECT * FROM SCORES WHERE SCORE = (SELECT MIN(SCORE) FROM SCORES);
4 | MATH | 70
STUDENT_ID | SUBJECT | SCORE

=== 测试12: IN值列表 - 多个ID ===
SELECT * FROM STUDENTS WHERE ID IN (1, 3, 5);
1 | ALICE | 20 | 1
3 | CHARLIE | 21 | 2
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试13: NOT IN值列表 ===
SELECT * FROM STUDENTS WHERE ID NOT IN (2, 4);
1 | ALICE | 20 | 1
3 | CHARLIE | 21 | 2
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试14: 子查询与比较运算 - 大于最小分数 ===
SELECT * FROM SCORES WHERE SCORE > (SELECT MIN(SCORE) FROM SCORES);
1 | MATH | 85
1 | PHYSICS | 90
2 | MATH | 78
2 | PHYSICS | 88
3 | MATH | 92
3 | PHYSICS | 85
STUDENT_ID | SUBJECT | SCORE

=== 测试15: 子查询与比较运算 - 小于最大分数 ===
SELECT * FROM SCORES WHERE SCORE < (SELECT MAX(SCORE) FROM SCORES);
1 | MATH | 85
1 | PHYSICS | 90
2 | MATH | 78
2 | PHYSICS | 88
3 | PHYSICS | 85
4 | MATH | 70
STUDENT_ID | SUBJECT | SCORE

=== 测试16: EXISTS检查空表 ===
SELECT * FROM STUDENTS WHERE EXISTS (SELECT * FROM EMPTY_TABLE);
ID | NAME | AGE | CLASS_ID

=== 测试17: NOT EXISTS检查空表 ===
SELECT * FROM STUDENTS WHERE NOT EXISTS (SELECT * FROM EMPTY_TABLE);
1 | ALICE | 20 | 1
2 | BOB | 22 | 1
3 | CHARLIE | 21 | 2
4 | DAVID | 23 | 2
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试18: IN子查询 - 特定班级的学生 ===
SELECT * FROM STUDENTS WHERE CLASS_ID IN (SELECT ID FROM CLASSES WHERE ID <= 2);
1 | ALICE | 20 | 1
2 | BOB | 22 | 1
3 | CHARLIE | 21 | 2
4 | DAVID | 23 | 2
ID | NAME | AGE | CLASS_ID

=== 测试19: 子查询COUNT - 查找大于学生总数一半的ID ===
SELECT * FROM STUDENTS WHERE ID > (SELECT COUNT(*) FROM STUDENTS) / 2;
3 | CHARLIE | 21 | 2
4 | DAVID | 23 | 2
5 | EVE | 20 | 3
ID | NAME | AGE | CLASS_ID

=== 测试20: IN + 多条件子查询 ===
SELECT * FROM STUDENTS WHERE ID IN (SELECT STUDENT_ID FROM SCORES WHERE SCORE >= 85 AND SUBJECT = 'MATH');
1 | ALICE | 20 | 1
3 | CHARLIE | 21 | 2
ID | NAME | AGE | CLASS_ID

=== 清理 ===
DROP TABLE STUDENTS;
SUCCESS
DROP TABLE CLASSES;
SUCCESS
DROP TABLE SCORES;
SUCCESS
DROP TABLE EMPTY_TABLE;
SUCCESS

