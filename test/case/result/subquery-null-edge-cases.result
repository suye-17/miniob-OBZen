=== 子查询NULL值和边界情况测试 ===

=== 初始化测试数据 ===
CREATE TABLE TEST_NULL(ID INT, VAL INT, NAME CHAR(10));
SUCCESS

INSERT INTO TEST_NULL VALUES (1, 10, 'ALICE');
SUCCESS
INSERT INTO TEST_NULL VALUES (2, 20, 'BOB');
SUCCESS
INSERT INTO TEST_NULL VALUES (3, 30, 'CHARLIE');
SUCCESS

=== 测试1: IN值列表 - 包含NULL ===
SELECT * FROM TEST_NULL WHERE VAL IN (10, 20);
1 | 10 | ALICE
2 | 20 | BOB
ID | VAL | NAME

=== 测试2: NOT IN值列表 - 不包含NULL ===
SELECT * FROM TEST_NULL WHERE VAL NOT IN (10);
2 | 20 | BOB
3 | 30 | CHARLIE
ID | VAL | NAME

=== 测试3: 标量子查询 - COUNT空表 ===
SELECT COUNT(*) FROM TEST_NULL WHERE ID > 100;
COUNT(*)
0

=== 测试4: 标量子查询 - AVG单行 ===
SELECT AVG(VAL) FROM TEST_NULL WHERE ID = 1;
AVG(VAL)
10

=== 测试5: IN - 单个值 ===
SELECT * FROM TEST_NULL WHERE ID IN (2);
2 | 20 | BOB
ID | VAL | NAME

=== 测试6: NOT IN - 单个值 ===
SELECT * FROM TEST_NULL WHERE ID NOT IN (2);
1 | 10 | ALICE
3 | 30 | CHARLIE
ID | VAL | NAME

=== 测试7: EXISTS - 子查询有结果 ===
SELECT * FROM TEST_NULL WHERE EXISTS (SELECT * FROM TEST_NULL WHERE ID = 1);
1 | 10 | ALICE
2 | 20 | BOB
3 | 30 | CHARLIE
ID | VAL | NAME

=== 测试8: NOT EXISTS - 子查询无结果 ===
SELECT * FROM TEST_NULL WHERE NOT EXISTS (SELECT * FROM TEST_NULL WHERE ID > 100);
ID | VAL | NAME

=== 测试9: IN子查询 - 单行结果 ===
SELECT * FROM TEST_NULL WHERE ID IN (SELECT ID FROM TEST_NULL WHERE ID = 1);
1 | 10 | ALICE
ID | VAL | NAME

=== 测试10: 标量子查询 - 等于NULL情况处理 ===
SELECT * FROM TEST_NULL WHERE VAL = (SELECT VAL FROM TEST_NULL WHERE ID > 100);
ID | VAL | NAME

=== 测试11: 比较子查询 - 大于等于 ===
SELECT * FROM TEST_NULL WHERE VAL >= (SELECT MIN(VAL) FROM TEST_NULL);
1 | 10 | ALICE
2 | 20 | BOB
3 | 30 | CHARLIE
ID | VAL | NAME

=== 测试12: 比较子查询 - 小于等于 ===
SELECT * FROM TEST_NULL WHERE VAL <= (SELECT MAX(VAL) FROM TEST_NULL);
1 | 10 | ALICE
2 | 20 | BOB
3 | 30 | CHARLIE
ID | VAL | NAME

=== 测试13: IN空值列表 ===
SELECT * FROM TEST_NULL WHERE ID IN ();
FAILURE

=== 测试14: 嵌套子查询 - IN中包含子查询 ===
SELECT * FROM TEST_NULL WHERE ID IN (SELECT ID FROM TEST_NULL WHERE VAL IN (SELECT VAL FROM TEST_NULL WHERE ID <= 2));
1 | 10 | ALICE
ID | VAL | NAME

=== 测试15: 聚合函数SUM ===
SELECT SUM(VAL) FROM TEST_NULL;
SUM(VAL)
60

=== 测试16: 聚合函数COUNT ===
SELECT COUNT(*) FROM TEST_NULL;
COUNT(*)
3

=== 测试17: 聚合函数MAX ===
SELECT MAX(VAL) FROM TEST_NULL;
MAX(VAL)
30

=== 测试18: 聚合函数MIN ===
SELECT MIN(VAL) FROM TEST_NULL;
MIN(VAL)
10

=== 测试19: 聚合函数AVG ===
SELECT AVG(VAL) FROM TEST_NULL;
AVG(VAL)
20

=== 测试20: 多个聚合函数组合 ===
SELECT COUNT(*), SUM(VAL), AVG(VAL), MAX(VAL), MIN(VAL) FROM TEST_NULL;
COUNT(*) | SUM(VAL) | AVG(VAL) | MAX(VAL) | MIN(VAL)
3 | 60 | 20 | 30 | 10

=== 清理 ===
DROP TABLE TEST_NULL;
SUCCESS

